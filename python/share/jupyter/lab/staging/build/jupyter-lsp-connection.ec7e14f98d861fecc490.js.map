{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/@kiteco/jupyterlab-kite/lib/connection.js"],"names":["LSPConnection","LspWsConnection","constructor","options","super","this","closing_manually","documentsToOpen","status_model","kite_status_model","sendOpenWhenReady","documentInfo","isReady","_sendOpen","push","onServerInitialized","params","length","document","pop","to","event","props","connection","sendRequest","_a","console","warn","filepath","result","uri","status","sendSelection","location","text","sendNotification","positions","line","character","ch","textDocument","e","fetchKiteStatus","sendSelectiveChange","changeEvent","_sendChange","sendFullTextChange","isRenameSupported","serverCapabilities","renameProvider","newName","emit","position","edit","initializeParams","initializationOptions","kiteTypesEnabled","connect","socket","isConnected","then","onClose","catch","error","close","sendOpen","changeEvents","isInitialized","textDocumentChange","version","contentChanges"],"mappings":"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","file":"jupyter-lsp-connection.ec7e14f98d861fecc490.js?v=ec7e14f98d861fecc490","sourcesContent":["import * as path from 'path';\nimport { LspWsConnection } from 'lsp-ws-connection';\nimport { until_ready } from './utils';\nexport class LSPConnection extends LspWsConnection {\n    constructor(options) {\n        super(options);\n        this.closing_manually = false;\n        this.documentsToOpen = [];\n        this.status_model = options.kite_status_model;\n    }\n    sendOpenWhenReady(documentInfo) {\n        if (this.isReady) {\n            this._sendOpen(documentInfo);\n        }\n        else {\n            this.documentsToOpen.push(documentInfo);\n        }\n    }\n    onServerInitialized(params) {\n        super.onServerInitialized(params);\n        while (this.documentsToOpen.length) {\n            const document = this.documentsToOpen.pop();\n            if (document) {\n                this._sendOpen(document);\n            }\n        }\n    }\n    async track(to, event, props) {\n        try {\n            await this.connection.sendRequest('kite/track', {\n                to,\n                event,\n                props\n            });\n        }\n        catch (_a) {\n            console.warn(`Could not track ${event}, ${props} to ${to}`);\n        }\n    }\n    async fetchKiteOnboarding() {\n        let filepath;\n        try {\n            filepath = await this.connection.sendRequest('kite/onboarding');\n            return path.basename(filepath);\n        }\n        catch (_a) {\n            console.warn('Could not get Kite Onboarding file.');\n        }\n        return '';\n    }\n    async fetchKiteStatus(documentInfo) {\n        let result;\n        try {\n            result = await this.connection.sendRequest('kite/status', {\n                uri: documentInfo.uri\n            });\n            if (this.status_model) {\n                this.status_model.status = result;\n            }\n        }\n        catch (_a) {\n            console.warn('Kite Status could not be fetched. Setting to not ready.');\n            if (this.status_model) {\n                this.status_model.status = null;\n            }\n        }\n    }\n    sendSelection(location, documentInfo, text) {\n        try {\n            this.connection.sendNotification('kite/selection', {\n                positions: [{ line: location.line, character: location.ch }],\n                textDocument: { uri: documentInfo.uri },\n                text\n            });\n        }\n        catch (e) {\n            console.warn('[Kite] Selection Notification Error:', e);\n        }\n        this.fetchKiteStatus(documentInfo);\n    }\n    sendSelectiveChange(changeEvent, documentInfo) {\n        this._sendChange([changeEvent], documentInfo);\n    }\n    sendFullTextChange(text, documentInfo) {\n        this._sendChange([{ text }], documentInfo);\n    }\n    isRenameSupported() {\n        return !!(this.serverCapabilities && this.serverCapabilities.renameProvider);\n    }\n    async rename(location, documentInfo, newName, emit = true) {\n        if (!this.isReady || !this.isRenameSupported()) {\n            return;\n        }\n        const params = {\n            textDocument: {\n                uri: documentInfo.uri\n            },\n            position: {\n                line: location.line,\n                character: location.ch\n            },\n            newName\n        };\n        const edit = await this.connection.sendRequest('textDocument/rename', params);\n        if (emit) {\n            this.emit('renamed', edit);\n        }\n        return edit;\n    }\n    initializeParams() {\n        const params = super.initializeParams();\n        params.initializationOptions = { kiteTypesEnabled: true };\n        return params;\n    }\n    connect(socket) {\n        super.connect(socket);\n        until_ready(() => {\n            return this.isConnected;\n        }, -1)\n            .then(() => {\n            this.connection.onClose(() => {\n                this.isConnected = false;\n                this.emit('close', this.closing_manually);\n            });\n        })\n            .catch(() => {\n            console.error('Could not connect onClose signal');\n        });\n        return this;\n    }\n    close() {\n        try {\n            this.closing_manually = true;\n            super.close();\n        }\n        catch (e) {\n            this.closing_manually = false;\n        }\n    }\n    _sendOpen(documentInfo) {\n        this.sendOpen(documentInfo);\n        this.fetchKiteStatus(documentInfo);\n    }\n    _sendChange(changeEvents, documentInfo) {\n        if (!this.isConnected || !this.isInitialized) {\n            return;\n        }\n        const textDocumentChange = {\n            textDocument: {\n                uri: documentInfo.uri,\n                version: documentInfo.version\n            },\n            contentChanges: changeEvents\n        };\n        this.connection.sendNotification('textDocument/didChange', textDocumentChange);\n        documentInfo.version++;\n        this.fetchKiteStatus(documentInfo);\n    }\n}\n//# sourceMappingURL=connection.js.map"],"sourceRoot":""}