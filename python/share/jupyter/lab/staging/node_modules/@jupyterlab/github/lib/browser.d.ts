import { FileBrowser } from '@jupyterlab/filebrowser';
import { Message } from '@lumino/messaging';
import { ISignal } from '@lumino/signaling';
import { Widget } from '@lumino/widgets';
import { GitHubDrive } from './contents';
/**
 * Widget for hosting the GitHub filebrowser.
 */
export declare class GitHubFileBrowser extends Widget {
    constructor(browser: FileBrowser, drive: GitHubDrive);
    /**
     * An editable widget hosting the current user name.
     */
    readonly userName: GitHubUserInput;
    /**
     * React to a change in user.
     */
    private _onUserChanged;
    /**
     * React to the path changing for the browser.
     */
    private _onPathChanged;
    /**
     * React to a change in the validity of the drive.
     */
    private _updateErrorPanel;
    private _browser;
    private _drive;
    private _errorPanel;
    private _openGitHubButton;
    private _launchBinderButton;
    private _binderActive;
    private _changeGuard;
}
/**
 * A widget that hosts an editable field,
 * used to host the currently active GitHub
 * user name.
 */
export declare class GitHubUserInput extends Widget {
    constructor();
    /**
     * The current name of the field.
     */
    get name(): string;
    set name(value: string);
    /**
     * A signal for when the name changes.
     */
    get nameChanged(): ISignal<this, {
        newValue: string;
        oldValue: string;
    }>;
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the main area widget's node. It should
     * not be called directly by user code.
     */
    handleEvent(event: KeyboardEvent): void;
    /**
     * Handle `after-attach` messages for the widget.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before-detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    private _name;
    private _nameChanged;
    private _input;
}
/**
 * A widget hosting an error panel for the browser,
 * used if there is an invalid user name or if we
 * are being rate-limited.
 */
export declare class GitHubErrorPanel extends Widget {
    constructor(message: string);
}
