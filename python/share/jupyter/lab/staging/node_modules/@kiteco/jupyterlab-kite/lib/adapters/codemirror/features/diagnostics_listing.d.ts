import React, { ReactElement } from 'react';
import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';
import * as lsProtocol from 'vscode-languageserver-protocol';
import * as CodeMirror from 'codemirror';
import { IEditorPosition } from '../../../positioning';
import { VirtualEditor } from '../../../virtual/editor';
import { VirtualDocument } from '../../../virtual/document';
import '../../../../style/diagnostics_listing.css';
/**
 * Diagnostic which is localized at a specific editor (cell) within a notebook
 * (if used in the context of a FileEditor, then there is just a single editor)
 */
export interface IEditorDiagnostic {
    diagnostic: lsProtocol.Diagnostic;
    editor: CodeMirror.Editor;
    range: {
        start: IEditorPosition;
        end: IEditorPosition;
    };
}
export declare const DIAGNOSTICS_LISTING_CLASS = "lsp-diagnostics-listing";
export declare class DiagnosticsDatabase extends Map<VirtualDocument, IEditorDiagnostic[]> {
    get all(): Array<IEditorDiagnostic>;
}
interface IDiagnosticsRow {
    data: IEditorDiagnostic;
    key: string;
    document: VirtualDocument;
    /**
     * Cell number is the ordinal, 1-based cell identifier displayed to the user.
     */
    cell_number?: number;
}
interface IListingContext {
    db: DiagnosticsDatabase;
    editor: VirtualEditor;
}
interface IColumnOptions {
    name: string;
    render_cell(data: IDiagnosticsRow, context?: IListingContext): ReactElement;
    sort(a: IDiagnosticsRow, b: IDiagnosticsRow): number;
    is_available?(context: IListingContext): boolean;
}
declare class Column {
    private options;
    is_visible: boolean;
    constructor(options: IColumnOptions);
    render_cell(data: IDiagnosticsRow, context: IListingContext): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    sort(a: IDiagnosticsRow, b: IDiagnosticsRow): number;
    get name(): string;
    is_available(context: IListingContext): boolean;
    render_header(listing: DiagnosticsListing): ReactElement;
}
export declare class DiagnosticsListing extends VDomRenderer<DiagnosticsListing.Model> {
    sort_key: string;
    sort_direction: number;
    columns: Column[];
    sort(key: string): void;
    render(): JSX.Element;
}
export declare namespace DiagnosticsListing {
    /**
     * A VDomModel for the LSP of current file editor/notebook.
     */
    class Model extends VDomModel {
        diagnostics: DiagnosticsDatabase;
        virtual_editor: VirtualEditor;
        constructor();
    }
}
export {};
