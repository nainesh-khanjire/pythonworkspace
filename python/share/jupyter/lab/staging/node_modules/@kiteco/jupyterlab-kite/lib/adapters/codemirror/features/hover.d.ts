import { IRootPosition } from '../../../positioning';
import * as lsProtocol from 'vscode-languageserver-protocol';
import * as CodeMirror from 'codemirror';
import { CodeMirrorLSPFeature, IEditorRange } from '../feature';
export declare type KeyModifier = 'Alt' | 'Control' | 'Shift' | 'Meta' | 'AltGraph';
export declare class Hover extends CodeMirrorLSPFeature {
    name: string;
    protected hover_character: IRootPosition;
    private last_hover_response;
    private show_next_tooltip;
    private last_hover_character;
    protected hover_marker: CodeMirror.TextMarker;
    private virtual_position;
    private debounced_get_hover;
    register(): void;
    on_hover: () => Promise<lsProtocol.Hover>;
    protected static get_markup_for_hover(response: lsProtocol.Hover): lsProtocol.MarkupContent;
    handleHover: (response: lsProtocol.Hover, documentUri: string) => void;
    protected is_token_empty(token: CodeMirror.Token): boolean;
    protected is_event_inside_visible(event: MouseEvent): boolean;
    _handleMouseOver(event: MouseEvent): Promise<void>;
    handleMouseOver: (event: MouseEvent) => Promise<void>;
    protected editor_range_for_hover(range: lsProtocol.Range): IEditorRange;
    hide_hover(): void;
    protected remove_range_highlight: () => void;
    remove(): void;
}
