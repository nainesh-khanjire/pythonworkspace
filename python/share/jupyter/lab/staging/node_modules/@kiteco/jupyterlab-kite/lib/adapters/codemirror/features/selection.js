import { CodeMirrorLSPFeature } from '../feature';
export class Selection extends CodeMirrorLSPFeature {
    constructor() {
        super(...arguments);
        this.name = 'Selection';
        this.onMousedown = async () => {
            var _a, _b;
            if (!((_b = (_a = this.virtual_editor) === null || _a === void 0 ? void 0 : _a.virtual_document) === null || _b === void 0 ? void 0 : _b.document_info)) {
                return;
            }
            let root_position;
            try {
                root_position = this.virtual_editor
                    .getDoc()
                    .getCursor('start');
            }
            catch (err) {
                console.warn('[Kite]: no root position available');
                return;
            }
            let document;
            try {
                document = this.virtual_editor.document_at_root_position(root_position);
            }
            catch (e) {
                console.warn('[Kite]: Could not obtain virtual document from position', root_position);
                return;
            }
            if (document !== this.virtual_document) {
                return;
            }
            let virtual_position = this.virtual_editor.root_position_to_virtual_position(root_position);
            console.log('[Kite] Virtual Position', virtual_position);
            this.connection.sendSelection(virtual_position, this.virtual_document.document_info, this.virtual_document.value);
        };
    }
    register() {
        this.wrapper_handlers.set('mousedown', this.onMousedown);
        super.register();
    }
    remove() {
        delete this.onMousedown;
        super.remove();
    }
}
//# sourceMappingURL=selection.js.map