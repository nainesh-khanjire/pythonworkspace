import { CodeMirrorEditor } from '@jupyterlab/codemirror';
import { VirtualEditor } from '../../virtual/editor';
import { CodeMirrorLSPFeature, ILSPFeatureConstructor } from './feature';
import { LSPConnection } from '../../connection';
import { VirtualFileEditor } from '../../virtual/editors/file_editor';
import { IJupyterLabComponentsManager } from '../jupyterlab/jl_adapter';
import { VirtualEditorForNotebook } from '../../virtual/editors/notebook';
import { Notebook } from '@jupyterlab/notebook';
import { IOverridesRegistry } from '../../magics/overrides';
import { IForeignCodeExtractorsRegistry } from '../../extractors/types';
import * as nbformat from '@jupyterlab/nbformat';
import { CodeMirrorAdapter } from './cm_adapter';
import { VirtualDocument } from '../../virtual/document';
import { LanguageServerManager } from '../../manager';
import { DocumentConnectionManager } from '../../connection_manager';
interface IFeatureTestEnvironment {
    host: HTMLElement;
    virtual_editor: VirtualEditor;
    dispose(): void;
}
export declare class MockLanguageServerManager extends LanguageServerManager {
    fetchSessions(): Promise<void>;
}
export declare abstract class FeatureTestEnvironment implements IFeatureTestEnvironment {
    language: () => string;
    path: () => string;
    file_extension: () => string;
    host: HTMLElement;
    virtual_editor: VirtualEditor;
    private connections;
    protected constructor(language: () => string, path: () => string, file_extension: () => string);
    init(): void;
    abstract create_virtual_editor(): VirtualEditor;
    init_feature<T extends CodeMirrorLSPFeature>(feature_type: ILSPFeatureConstructor, register?: boolean, document?: VirtualDocument): T;
    dispose_feature(feature: CodeMirrorLSPFeature): void;
    create_dummy_connection(): LSPConnection;
    create_dummy_components(): IJupyterLabComponentsManager;
    dispose(): void;
}
export declare class FileEditorFeatureTestEnvironment extends FeatureTestEnvironment {
    ce_editor: CodeMirrorEditor;
    connection_manager: DocumentConnectionManager;
    language_server_manager: LanguageServerManager;
    constructor(language?: () => string, path?: () => string, file_extension?: () => string);
    create_virtual_editor(): VirtualFileEditor;
    dispose(): void;
}
export declare class NotebookFeatureTestEnvironment extends FeatureTestEnvironment {
    overrides_registry: IOverridesRegistry;
    foreign_code_extractors: IForeignCodeExtractorsRegistry;
    notebook: Notebook;
    virtual_editor: VirtualEditorForNotebook;
    wrapper: HTMLElement;
    constructor(language?: () => string, path?: () => string, file_extension?: () => string, overrides_registry?: IOverridesRegistry, foreign_code_extractors?: IForeignCodeExtractorsRegistry);
    create_virtual_editor(): VirtualEditorForNotebook;
}
export declare function code_cell(source: string[] | string, metadata?: object): nbformat.ICodeCell;
export declare function set_notebook_content(notebook: Notebook, cells: nbformat.ICodeCell[], metadata?: nbformat.INotebookMetadata): void;
export declare const python_notebook_metadata: nbformat.INotebookMetadata;
export declare function showAllCells(notebook: Notebook): void;
export declare function getCellsJSON(notebook: Notebook): nbformat.ICell[];
export declare function synchronize_content(environment: FeatureTestEnvironment, adapter: CodeMirrorAdapter): Promise<void>;
export {};
