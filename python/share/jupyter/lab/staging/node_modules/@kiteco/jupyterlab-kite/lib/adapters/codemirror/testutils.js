import { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';
import { LSPConnection } from '../../connection';
import { CodeEditor } from '@jupyterlab/codeeditor';
import { VirtualFileEditor } from '../../virtual/editors/file_editor';
import { StatusMessage } from '../jupyterlab/jl_adapter';
import { VirtualEditorForNotebook } from '../../virtual/editors/notebook';
import { NotebookModel } from '@jupyterlab/notebook';
import { NBTestUtils } from '@jupyterlab/testutils';
var createNotebook = NBTestUtils.createNotebook;
import { LanguageServerManager } from '../../manager';
import { DocumentConnectionManager } from '../../connection_manager';
export class MockLanguageServerManager extends LanguageServerManager {
    async fetchSessions() {
        this._sessions = new Map();
        this._sessions.set('pyls', {
            spec: {
                languages: ['python']
            }
        });
        this._sessionsChanged.emit(void 0);
    }
}
export class FeatureTestEnvironment {
    constructor(language, path, file_extension) {
        this.language = language;
        this.path = path;
        this.file_extension = file_extension;
        this.connections = new Map();
        this.host = document.createElement('div');
        document.body.appendChild(this.host);
    }
    init() {
        this.virtual_editor = this.create_virtual_editor();
    }
    init_feature(feature_type, register = true, document = null) {
        let dummy_components_manager = this.create_dummy_components();
        let connection = this.create_dummy_connection();
        const feature = new feature_type(this.virtual_editor, document ? document : this.virtual_editor.virtual_document, connection, dummy_components_manager, new StatusMessage());
        this.connections.set(feature, connection);
        if (register) {
            feature.register();
        }
        return feature;
    }
    dispose_feature(feature) {
        let connection = this.connections.get(feature);
        connection.close();
        feature.is_registered = false;
    }
    create_dummy_connection() {
        return new LSPConnection({
            languageId: this.language(),
            serverUri: 'ws://localhost:8080',
            rootUri: 'file:///unit-test'
        });
    }
    create_dummy_components() {
        return {
            cancel_completer: () => void {},
            invoke_completer: () => {
                // nothing yet
            },
            create_tooltip: () => {
                return {};
            },
            remove_tooltip: () => {
                // nothing yet
            },
            jumper: null,
            isDisposed: false,
            dispose: () => {
                // nothing yet
            }
        };
    }
    dispose() {
        document.body.removeChild(this.host);
    }
}
export class FileEditorFeatureTestEnvironment extends FeatureTestEnvironment {
    constructor(language = () => 'python', path = () => 'dummy.py', file_extension = () => 'py') {
        super(language, path, file_extension);
        const factoryService = new CodeMirrorEditorFactory();
        let model = new CodeEditor.Model();
        this.ce_editor = factoryService.newDocumentEditor({
            host: this.host,
            model
        });
        this.language_server_manager = new MockLanguageServerManager({});
        this.connection_manager = new DocumentConnectionManager({
            language_server_manager: this.language_server_manager
        });
        this.init();
    }
    create_virtual_editor() {
        return new VirtualFileEditor(this.language, this.file_extension, this.path, this.ce_editor.editor);
    }
    dispose() {
        super.dispose();
        this.ce_editor.dispose();
    }
}
export class NotebookFeatureTestEnvironment extends FeatureTestEnvironment {
    constructor(language = () => 'python', path = () => 'notebook.ipynb', file_extension = () => 'py', overrides_registry = {}, foreign_code_extractors = {}) {
        super(language, path, file_extension);
        this.overrides_registry = overrides_registry;
        this.foreign_code_extractors = foreign_code_extractors;
        this.notebook = createNotebook();
        this.wrapper = document.createElement('div');
        this.init();
    }
    create_virtual_editor() {
        return new VirtualEditorForNotebook(this.notebook, this.wrapper, this.language, this.file_extension, this.overrides_registry, this.foreign_code_extractors, this.path);
    }
}
export function code_cell(source, metadata = { trusted: false }) {
    return {
        cell_type: 'code',
        source: source,
        metadata: metadata,
        execution_count: null,
        outputs: []
    };
}
export function set_notebook_content(notebook, cells, metadata = python_notebook_metadata) {
    let test_notebook = {
        cells: cells,
        metadata: metadata
    };
    notebook.model = new NotebookModel();
    notebook.model.fromJSON(test_notebook);
}
export const python_notebook_metadata = {
    kernelspec: {
        display_name: 'Python [default]',
        language: 'python',
        name: 'python3'
    },
    language_info: {
        codemirror_mode: {
            name: 'ipython',
            version: 3
        },
        file_extension: '.py',
        mimetype: 'text/x-python',
        name: 'python',
        nbconvert_exporter: 'python',
        pygments_lexer: 'ipython3',
        version: '3.5.2'
    },
    orig_nbformat: 4.1
};
export function showAllCells(notebook) {
    notebook.show();
    // iterate over every cell to activate the editors
    for (let i = 0; i < notebook.model.cells.length; i++) {
        notebook.activeCellIndex = i;
        notebook.activeCell.show();
    }
}
export function getCellsJSON(notebook) {
    let cells = [];
    for (let i = 0; i < notebook.model.cells.length; i++) {
        cells.push(notebook.model.cells.get(i));
    }
    return cells.map(cell => cell.toJSON());
}
export async function synchronize_content(environment, adapter) {
    await environment.virtual_editor.update_documents();
    try {
        await adapter.updateAfterChange();
    }
    catch (e) {
        console.warn(e);
    }
}
//# sourceMappingURL=testutils.js.map