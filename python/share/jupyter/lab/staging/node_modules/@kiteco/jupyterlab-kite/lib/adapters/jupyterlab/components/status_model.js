import { VDomModel } from '@jupyterlab/apputils';
import { PageConfig, URLExt } from '@jupyterlab/coreutils';
import { ServerConnection } from '@jupyterlab/services';
import { LabIcon } from '@jupyterlab/ui-components';
import { ILanguageServerManager } from '../../../tokens';
import kiteLogo from '../../../../style/icons/kite-logo.svg';
/**
 * A VDomModel for the LSP of current file editor/notebook.
 */
export class KiteStatusModel extends VDomModel {
    constructor() {
        super();
        this._icon = new LabIcon({
            name: 'jupyterlab-kite:status-icon',
            svgstr: kiteLogo
        });
        this._kiteStatus = null;
        this._installed = true;
        this._disconnected = false;
        this._connectionClosed = () => {
            this._disconnected = true;
            this._onChange();
        };
        this._onChange = () => {
            this.stateChanged.emit(void 0);
        };
        this._adapter = null;
        this.icon.bindprops({ className: 'kite-logo' });
    }
    async fetchKiteInstalled() {
        if (this._disconnected) {
            return;
        }
        const response = await ServerConnection.makeRequest(this.kiteInstalledUrl, { method: 'GET' }, ServerConnection.makeSettings());
        if (!response.ok) {
            console.warn('Could not fetch Kite Install status:', response.statusText);
        }
        let installed;
        try {
            installed = await response.json();
            if (this._installed !== installed) {
                this._installed = installed;
                this._onChange();
            }
        }
        catch (err) {
            console.warn(err);
        }
    }
    get kiteInstalledUrl() {
        return URLExt.join(PageConfig.getBaseUrl(), ILanguageServerManager.URL_NS, 'kite_installed');
    }
    set status(status) {
        this._kiteStatus = status;
        this._onChange();
    }
    get icon() {
        return this._icon;
    }
    get reloadRequired() {
        return this._disconnected;
    }
    get message() {
        if (this._disconnected) {
            return {
                text: 'Kite: disconnected (reload page)',
                tooltip: 'The connection to Kite was interrupted. Save your changes and reload the page to reconnect.',
            };
        }
        // If we have a _kiteStatus, Kite must be conidered installed.
        // This makes dev workflows work better.
        if (this.adapter && this._kiteStatus) {
            return {
                text: 'Kite: ' + this._kiteStatus.short,
                tooltip: this._kiteStatus.long,
            };
        }
        if (!this._installed) {
            return {
                text: 'Kite: not installed',
                tooltip: 'Kite install could not be found.',
            };
        }
        return {
            text: 'Kite: not running',
            tooltip: 'Kite is not reachable.',
        };
    }
    get adapter() {
        return this._adapter;
    }
    set adapter(adapter) {
        if (this._adapter != null) {
            this._adapter.status_message.changed.connect(this._onChange);
        }
        if (adapter != null) {
            adapter.status_message.changed.connect(this._onChange);
        }
        this._adapter = adapter;
    }
    get connection_manager() {
        return this._connection_manager;
    }
    set connection_manager(connection_manager) {
        if (this._connection_manager != null) {
            this._connection_manager.connected.disconnect(this._onChange);
            this._connection_manager.initialized.connect(this._onChange);
            this._connection_manager.closed.disconnect(this._connectionClosed);
            this._connection_manager.documents_changed.disconnect(this._onChange);
        }
        if (connection_manager != null) {
            connection_manager.connected.connect(this._onChange);
            connection_manager.initialized.connect(this._onChange);
            connection_manager.closed.connect(this._connectionClosed);
            connection_manager.documents_changed.connect(this._onChange);
        }
        this._connection_manager = connection_manager;
    }
    get activeDocument() {
        if (this.adapter && this.adapter.virtual_editor) {
            return this.adapter.virtual_editor.virtual_document;
        }
        return undefined;
    }
    get activeConnection() {
        if (this.activeDocument) {
            return this.connection_manager.connections.get(this.activeDocument.id_path);
        }
        return undefined;
    }
}
//# sourceMappingURL=status_model.js.map