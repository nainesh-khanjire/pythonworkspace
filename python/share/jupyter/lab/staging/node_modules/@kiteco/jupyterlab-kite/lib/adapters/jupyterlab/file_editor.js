import { VirtualFileEditor } from '../../virtual/editors/file_editor';
import { KiteConnector } from './components/completion';
import { JupyterLabWidgetAdapter } from './jl_adapter';
export class FileEditorAdapter extends JupyterLabWidgetAdapter {
    constructor(editor_widget, jumper, app, completion_manager, rendermime_registry, connection_manager, state) {
        super(app, editor_widget, rendermime_registry, 'completer:invoke-file', connection_manager, state);
        this.completion_manager = completion_manager;
        this.jumper = jumper;
        this.editor = editor_widget.content;
        this.virtual_editor = new VirtualFileEditor(() => this.language, () => this.language_file_extension, () => this.document_path, this.cm_editor);
        this.connect_contentChanged_signal();
        console.log('LSP: file ready for connection:', this.path);
        // connect the document, but do not open it as the adapter will handle this
        // after registering all features
        this.connect_document(this.virtual_editor.virtual_document, false).catch(console.warn);
        this.editor.model.mimeTypeChanged.connect(this.reload_connection, this);
    }
    get document_path() {
        return this.widget.context.path;
    }
    get mime_type() {
        return this.editor.model.mimeType;
    }
    get language_file_extension() {
        let parts = this.document_path.split('.');
        return parts[parts.length - 1];
    }
    get ce_editor() {
        return this.editor.editor;
    }
    get cm_editor() {
        return this.ce_editor.editor;
    }
    find_ce_editor(cm_editor) {
        return this.editor.editor;
    }
    connect_completion() {
        this.current_completion_connector = new KiteConnector({
            editor: this.editor.editor,
            connections: this.connection_manager.connections,
            virtual_editor: this.virtual_editor
        });
        const handler = this.completion_manager.register({
            connector: this.current_completion_connector,
            editor: this.editor.editor,
            parent: this.widget
        });
        this.registerKiteModules(handler, this.editor.editor, this.state);
    }
    get path() {
        return this.widget.context.path;
    }
}
//# sourceMappingURL=file_editor.js.map