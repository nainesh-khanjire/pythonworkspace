import { JupyterFrontEnd } from '@jupyterlab/application';
import { SessionContext } from '@jupyterlab/apputils';
import { Cell } from '@jupyterlab/cells';
import { CodeEditor } from '@jupyterlab/codeeditor';
import { CompletionHandler, ICompletionManager } from '@jupyterlab/completer';
import * as nbformat from '@jupyterlab/nbformat';
import { Notebook, NotebookPanel } from '@jupyterlab/notebook';
import { IRenderMimeRegistry } from '@jupyterlab/rendermime';
import { Session } from '@jupyterlab/services';
import { IStateDB } from '@jupyterlab/statedb';
import { NotebookJumper } from '@krassowski/jupyterlab_go_to_definition/lib/jumpers/notebook';
import * as CodeMirror from 'codemirror';
import { DocumentConnectionManager } from '../../connection_manager';
import { VirtualEditorForNotebook } from '../../virtual/editors/notebook';
import { KiteConnector } from './components/completion';
import { JupyterLabWidgetAdapter } from './jl_adapter';
import ILanguageInfoMetadata = nbformat.ILanguageInfoMetadata;
export declare class NotebookAdapter extends JupyterLabWidgetAdapter {
    editor: Notebook;
    widget: NotebookPanel;
    virtual_editor: VirtualEditorForNotebook;
    completion_manager: ICompletionManager;
    jumper: NotebookJumper;
    protected current_completion_connector: KiteConnector & {
        responseType: typeof CompletionHandler.ICompletionItemsResponseType;
    };
    private _language_info;
    constructor(editor_widget: NotebookPanel, jumper: NotebookJumper, app: JupyterFrontEnd, completion_manager: ICompletionManager, rendermime_registry: IRenderMimeRegistry, connection_manager: DocumentConnectionManager, state: IStateDB);
    private update_language_info;
    on_kernel_changed(_session: SessionContext, change: Session.ISessionConnection.IKernelChangedArgs): Promise<void>;
    dispose(): void;
    is_ready: () => boolean;
    get document_path(): string;
    protected language_info(): ILanguageInfoMetadata;
    get mime_type(): string;
    get language_file_extension(): string;
    find_ce_editor(cm_editor: CodeMirror.Editor): CodeEditor.IEditor;
    init_once_ready(): Promise<void>;
    private set_completion_connector;
    current_completion_handler: ICompletionManager.ICompletableAttributes;
    connect_completion(): void;
    on_completions(notebook: Notebook, cell: Cell): void;
}
