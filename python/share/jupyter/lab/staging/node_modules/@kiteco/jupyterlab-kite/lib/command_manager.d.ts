import { JupyterFrontEnd } from '@jupyterlab/application';
import { ICommandPalette, IWidgetTracker } from '@jupyterlab/apputils';
import { JupyterLabWidgetAdapter } from './adapters/jupyterlab/jl_adapter';
import { CommandEntryPoint, IFeatureCommand, ILSPFeature } from './adapters/codemirror/feature';
import { IEditorTracker } from '@jupyterlab/fileeditor';
import { FileEditorAdapter } from './adapters/jupyterlab/file_editor';
import { NotebookAdapter } from './adapters/jupyterlab/notebook';
import { INotebookTracker } from '@jupyterlab/notebook';
import { VirtualDocument } from './virtual/document';
import { LSPConnection } from './connection';
import { IRootPosition, IVirtualPosition } from './positioning';
import { VirtualEditor } from './virtual/editor';
export declare const file_editor_adapters: Map<string, FileEditorAdapter>;
export declare const notebook_adapters: Map<string, NotebookAdapter>;
declare abstract class LSPCommandManager {
    protected app: JupyterFrontEnd;
    protected palette: ICommandPalette;
    protected tracker: IWidgetTracker;
    protected suffix: string;
    protected constructor(app: JupyterFrontEnd, palette: ICommandPalette, tracker: IWidgetTracker, suffix: string);
    abstract entry_point: CommandEntryPoint;
    abstract get current_adapter(): JupyterLabWidgetAdapter;
    abstract attach_command(command: IFeatureCommand): void;
    abstract execute(command: IFeatureCommand): void;
    abstract is_enabled(command: IFeatureCommand): boolean;
    abstract is_visible(command: IFeatureCommand): boolean;
    add_to_palette: boolean;
    category: string;
    add(commands: Array<IFeatureCommand>): void;
    protected should_attach(command: IFeatureCommand): boolean;
    protected create_id(command: IFeatureCommand): string;
}
/**
 * Contextual commands, with the context retrieved from the ContextMenu
 * position (if open) or from the cursor in the current widget.
 */
export declare abstract class ContextCommandManager extends LSPCommandManager {
    protected rank_group?: number;
    protected rank_group_size?: number;
    abstract selector: string;
    constructor(app: JupyterFrontEnd, palette: ICommandPalette, tracker: IWidgetTracker, suffix: string, rank_group?: number, rank_group_size?: number);
    attach_command(command: IFeatureCommand): void;
    add_context_separator(position_in_group: number): void;
    execute(command: IFeatureCommand): void;
    protected get is_context_menu_open(): boolean;
    protected get is_widget_current(): boolean;
    is_enabled(): boolean;
    get_context(): ICommandContext | null;
    is_visible(command: IFeatureCommand): boolean;
    protected get_rank(command: IFeatureCommand): number;
    abstract context_from_active_document(): ICommandContext;
}
export declare class NotebookCommandManager extends ContextCommandManager {
    protected tracker: INotebookTracker;
    selector: string;
    entry_point: CommandEntryPoint;
    get current_adapter(): NotebookAdapter;
    context_from_active_document(): ICommandContext;
}
export declare class FileEditorCommandManager extends ContextCommandManager {
    protected tracker: IEditorTracker;
    selector: string;
    entry_point: CommandEntryPoint;
    get current_adapter(): FileEditorAdapter;
    context_from_active_document(): ICommandContext;
}
export interface ICommandContext {
    app: JupyterFrontEnd;
    document: VirtualDocument;
    connection: LSPConnection;
    virtual_position: IVirtualPosition;
    root_position: IRootPosition;
    features: Map<string, ILSPFeature>;
    editor: VirtualEditor;
    adapter: JupyterLabWidgetAdapter;
}
export {};
