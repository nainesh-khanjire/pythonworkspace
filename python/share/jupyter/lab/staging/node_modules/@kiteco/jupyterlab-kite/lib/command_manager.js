import { CommandEntryPoint } from './adapters/codemirror/feature';
import { PositionConverter } from './converter';
export const file_editor_adapters = new Map();
export const notebook_adapters = new Map();
function is_context_menu_over_token(adapter) {
    let position = adapter.get_position_from_context_menu();
    if (!position) {
        return false;
    }
    let token = adapter.virtual_editor.getTokenAt(position);
    return token.string !== '';
}
class LSPCommandManager {
    constructor(app, palette, tracker, suffix) {
        this.app = app;
        this.palette = palette;
        this.tracker = tracker;
        this.suffix = suffix;
        this.add_to_palette = true;
        this.category = 'Language Server Protocol';
    }
    add(commands) {
        for (let cmd of commands) {
            let id = this.create_id(cmd);
            this.app.commands.addCommand(id, {
                execute: () => this.execute(cmd),
                isEnabled: () => this.is_enabled(cmd),
                isVisible: () => this.is_visible(cmd),
                label: cmd.label
            });
            if (this.should_attach(cmd)) {
                this.attach_command(cmd);
            }
            if (this.add_to_palette) {
                this.palette.addItem({ command: id, category: this.category });
            }
        }
    }
    should_attach(command) {
        if (command.attach_to == null) {
            return true;
        }
        return command.attach_to.has(this.entry_point);
    }
    create_id(command) {
        return 'lsp:' + command.id + '-' + this.suffix;
    }
}
/**
 * Contextual commands, with the context retrieved from the ContextMenu
 * position (if open) or from the cursor in the current widget.
 */
export class ContextCommandManager extends LSPCommandManager {
    constructor(app, palette, tracker, suffix, rank_group, rank_group_size) {
        super(app, palette, tracker, suffix);
        this.rank_group = rank_group;
        this.rank_group_size = rank_group_size;
    }
    attach_command(command) {
        this.app.contextMenu.addItem({
            selector: this.selector,
            command: this.create_id(command),
            rank: this.get_rank(command)
        });
    }
    add_context_separator(position_in_group) {
        this.app.contextMenu.addItem({
            type: 'separator',
            selector: this.selector,
            rank: this.rank_group + position_in_group
        });
    }
    execute(command) {
        let context = this.get_context();
        if (context) {
            command.execute(context);
        }
    }
    get is_context_menu_open() {
        return this.app.contextMenu.menu.isAttached;
    }
    get is_widget_current() {
        // is the current widget of given type (notebook/editor)
        // also the currently used widget in the entire app?
        return (this.tracker.currentWidget != null &&
            this.tracker.currentWidget === this.app.shell.currentWidget);
    }
    is_enabled() {
        if (this.is_context_menu_open) {
            return is_context_menu_over_token(this.current_adapter);
        }
        else {
            return this.is_widget_current;
        }
    }
    get_context() {
        let context = null;
        if (this.is_context_menu_open) {
            try {
                context = this.current_adapter.get_context_from_context_menu();
            }
            catch (e) {
                console.warn('contextMenu is attached, but could not get the context', e);
                context = null;
            }
        }
        if (context == null) {
            context = this.context_from_active_document();
        }
        return context;
    }
    is_visible(command) {
        var _a;
        try {
            let context = this.get_context();
            return (context != null &&
                this.current_adapter && ((_a = context.connection) === null || _a === void 0 ? void 0 : _a.isReady) &&
                command.is_enabled(context));
        }
        catch (e) {
            console.warn('is_visible failed', e);
            return false;
        }
    }
    get_rank(command) {
        let is_relative = command.is_rank_relative == null ? true : command.is_rank_relative;
        if (is_relative && this.rank_group != null && this.rank_group_size) {
            let relative = command.rank != null ? command.rank : 0;
            return this.rank_group + relative / this.rank_group_size;
        }
        else {
            return command.rank != null ? command.rank : Infinity;
        }
    }
}
export class NotebookCommandManager extends ContextCommandManager {
    constructor() {
        super(...arguments);
        this.selector = '.jp-Notebook .jp-CodeCell .jp-Editor';
        this.entry_point = CommandEntryPoint.CellContextMenu;
    }
    get current_adapter() {
        let notebook = this.tracker.currentWidget;
        return notebook_adapters.get(notebook.id);
    }
    context_from_active_document() {
        var _a, _b;
        if (!this.is_widget_current) {
            return null;
        }
        let notebook = this.tracker.currentWidget;
        let cell = notebook.content.activeCell;
        let editor = cell.editor;
        let ce_cursor = editor.getCursorPosition();
        let cm_cursor = PositionConverter.ce_to_cm(ce_cursor);
        let virtual_editor = (_a = this.current_adapter) === null || _a === void 0 ? void 0 : _a.virtual_editor;
        if (!virtual_editor) {
            return null;
        }
        let root_position = virtual_editor.transform_from_notebook_to_root(cell, cm_cursor);
        return (_b = this.current_adapter) === null || _b === void 0 ? void 0 : _b.get_context(root_position);
    }
}
export class FileEditorCommandManager extends ContextCommandManager {
    constructor() {
        super(...arguments);
        this.selector = '.jp-FileEditor';
        this.entry_point = CommandEntryPoint.FileEditorContextMenu;
    }
    get current_adapter() {
        var _a, _b;
        let fileEditorId = (_b = (_a = this.tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.id;
        return fileEditorId && file_editor_adapters.get(fileEditorId);
    }
    context_from_active_document() {
        var _a;
        if (!this.is_widget_current) {
            return null;
        }
        let editor = this.tracker.currentWidget.content.editor;
        let ce_cursor = editor.getCursorPosition();
        let root_position = PositionConverter.ce_to_cm(ce_cursor);
        return (_a = this.current_adapter) === null || _a === void 0 ? void 0 : _a.get_context(root_position);
    }
}
//# sourceMappingURL=command_manager.js.map