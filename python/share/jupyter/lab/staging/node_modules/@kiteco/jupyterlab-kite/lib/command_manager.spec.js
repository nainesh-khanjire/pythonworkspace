import { expect } from 'chai';
import { ContextCommandManager } from './command_manager';
describe('ContextMenuCommandManager', () => {
    class ManagerImplementation extends ContextCommandManager {
        get_rank(command) {
            return super.get_rank(command);
        }
        get current_adapter() {
            return undefined;
        }
        context_from_active_document() {
            return undefined;
        }
    }
    let manager;
    let base_command = {
        id: 'cmd',
        execute: () => {
            // nothing here het
        },
        is_enabled: () => {
            return true;
        },
        label: 'Command'
    };
    describe('#get_rank()', () => {
        it('uses in-group (relative) positioning by default', () => {
            manager = new ManagerImplementation(null, null, null, null, 0, 5);
            let rank = manager.get_rank(base_command);
            expect(rank).to.equal(0);
            rank = manager.get_rank(Object.assign(Object.assign({}, base_command), { rank: 1 }));
            expect(rank).to.equal(1 / 5);
            manager = new ManagerImplementation(null, null, null, null, 1, 5);
            rank = manager.get_rank(Object.assign(Object.assign({}, base_command), { rank: 1 }));
            expect(rank).to.equal(1 + 1 / 5);
        });
    });
    it('respects is_rank_relative value', () => {
        manager = new ManagerImplementation(null, null, null, null, 0, 5);
        let rank = manager.get_rank(Object.assign(Object.assign({}, base_command), { rank: 1, is_rank_relative: false }));
        expect(rank).to.equal(1);
        rank = manager.get_rank(Object.assign(Object.assign({}, base_command), { rank: 1, is_rank_relative: true }));
        expect(rank).to.equal(1 / 5);
    });
});
//# sourceMappingURL=command_manager.spec.js.map