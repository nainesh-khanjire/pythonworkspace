import * as lsProtocol from 'vscode-languageserver-protocol';
import { ILspOptions, IPosition, LspWsConnection, IDocumentInfo } from 'lsp-ws-connection';
import { KiteStatusModel } from './adapters/jupyterlab/components/status_model';
interface ILSPOptions extends ILspOptions {
    kite_status_model?: KiteStatusModel;
}
export declare class LSPConnection extends LspWsConnection {
    protected documentsToOpen: IDocumentInfo[];
    protected status_model?: KiteStatusModel;
    constructor(options: ILSPOptions);
    sendOpenWhenReady(documentInfo: IDocumentInfo): void;
    protected onServerInitialized(params: lsProtocol.InitializeResult): void;
    track(to: string, event: string, props: {}): Promise<void>;
    fetchKiteOnboarding(): Promise<string>;
    fetchKiteStatus(documentInfo: IDocumentInfo): Promise<void>;
    sendSelection(location: IPosition, documentInfo: IDocumentInfo, text: string): void;
    sendSelectiveChange(changeEvent: lsProtocol.TextDocumentContentChangeEvent, documentInfo: IDocumentInfo): void;
    sendFullTextChange(text: string, documentInfo: IDocumentInfo): void;
    isRenameSupported(): boolean;
    rename(location: IPosition, documentInfo: IDocumentInfo, newName: string, emit?: boolean): Promise<lsProtocol.WorkspaceEdit | undefined>;
    protected initializeParams(): lsProtocol.InitializeParams;
    connect(socket: WebSocket): this;
    private closing_manually;
    close(): void;
    private _sendOpen;
    private _sendChange;
}
export {};
