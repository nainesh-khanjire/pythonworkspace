import { IExtractedCode, IForeignCodeExtractor } from './types';
import { replacer } from '../magics/overrides';
export declare class RegExpForeignCodeExtractor implements IForeignCodeExtractor {
    options: RegExpForeignCodeExtractor.IOptions;
    language: string;
    global_expression: RegExp;
    test_expression: RegExp;
    expression: RegExp;
    standalone: boolean;
    file_extension: string;
    constructor(options: RegExpForeignCodeExtractor.IOptions);
    has_foreign_code(code: string): boolean;
    extract_foreign_code(code: string): IExtractedCode[];
}
declare namespace RegExpForeignCodeExtractor {
    interface IOptions {
        /**
         * The foreign language.
         */
        language: string;
        /**
         * String giving regular expression to test cells for the foreign language presence.
         *
         * For example:
         *   - %%R( (.*))?\n(.*) will match R cells of rpy2
         *   - (.*)'<html>(.*)</html>'(.*) will match html documents in strings of any language using single ticks
         */
        pattern: string;
        /**
         * String specifying match groups to be extracted from the regular expression match,
         * for the use in virtual document of the foreign language.
         * For the R example this should be '$3'
         */
        extract_to_foreign: string | replacer;
        /**
         * If arguments from the cell or line magic are to be extracted and prepended before the extracted code,
         * set extract_arguments to a replacer function taking the code and returning the string to be prepended.
         */
        extract_arguments?: replacer;
        /**
         * Boolean if everything (true, default) or nothing (false) should be kept in the host document.
         *
         * For the R example this should be empty if we wish to ignore the cell,
         * but usually a better option is to retain the foreign code and use language
         * specific overrides to suppress the magic in a more controlled way, providing
         * dummy python code to handle cell input/output.
         *
         * Setting to false is DEPRECATED as it breaks the edit feature (while it could be fixed,
         * it would make the code considerably more complex).
         */
        keep_in_host?: boolean;
        /**
         * Should the foreign code be appended (False) to the previously established virtual document of the same language,
         * or is it standalone snippet which requires separate connection?
         */
        is_standalone: boolean;
        file_extension: string;
    }
}
export {};
