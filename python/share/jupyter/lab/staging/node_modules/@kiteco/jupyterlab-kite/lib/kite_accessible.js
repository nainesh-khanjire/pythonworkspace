import { ServerConnection } from '@jupyterlab/services';
import { PageConfig, URLExt } from '@jupyterlab/coreutils';
import { ListModel } from '@jupyterlab/extensionmanager';
import { INotification } from 'jupyterlab_toastify';
import React from 'react';
import Semver from 'semver';
import { ILanguageServerManager } from './tokens';
import { VirtualDocument } from './virtual/document';
import '../style/kite_accessible.css';
var Health;
(function (Health) {
    Health["RequirementsNotMet"] = "RequirementsNotMet";
    Health["KiteEngineNotInstalled"] = "KiteNotInstalled";
    Health["BelowMinJLabVersion"] = "BelowMinJLabVersion";
    Health["IncompatibleJLabLSPPlugin"] = "HasIncompatibleJLabLSP";
    Health["JLabKiteHasUpdate"] = "JLabKiteHasUpdate";
    Health["Healthy"] = "Healthy";
})(Health || (Health = {}));
const _MinJlabVersion = '2.2.0';
// KiteAccessible must access fetchInstalled, etc
export class KiteAccessible extends ListModel {
    constructor(serviceManager, settings, connectionManager) {
        super(serviceManager, settings);
        this.connectionManager = connectionManager;
    }
    async checkHealth() {
        try {
            const health = await this.getHealth();
            await this.notifyHealth(health);
            if (health === Health.IncompatibleJLabLSPPlugin) {
                this.trackIncompatiblity();
            }
        }
        catch (e) {
            console.log('Health check failed:', e);
        }
    }
    async notifyHealth(health) {
        const baseToastOptions = {
            autoClose: false,
            closeOnClick: false,
            className: '--jp-kite-notifcontainer'
        };
        let id;
        switch (health) {
            case Health.RequirementsNotMet:
                id = await INotification.notify(React.createElement(InnerNotif, { title: "Kite is missing some dependencies" },
                    React.createElement("p", { className: "--jp-kite-innernotif-main-msg" }, "The jupyterlab-kite extension will not work because you using an unsupported version of JupyterLab and you are missing the desktop application."),
                    React.createElement("p", null, "To fix this, please upgrade JupyterLab to version 2.2 or later and install the Kite Engine desktop application."),
                    React.createElement(ButtonBar, { label: "Fix This", onClick: () => {
                            window.open('https://www.kite.com/download?utm_source=jupyterlab-plugin&utm_content=update-jlab', '_blank');
                            INotification.dismiss(id);
                        } })), Object.assign(Object.assign({}, baseToastOptions), { type: 'error' }));
                break;
            case Health.BelowMinJLabVersion:
                id = await INotification.notify(React.createElement(InnerNotif, { title: "Kite is missing some dependencies" },
                    React.createElement("p", { className: "--jp-kite-innernotif-main-msg" }, "The jupyterlab-kite extension will not work because you are using an unsupported version of JupyterLab."),
                    React.createElement("p", null, "To fix this, please upgrade JupyterLab to version 2.2 or later."),
                    React.createElement(ButtonBar, { label: "Fix This", onClick: () => {
                            window.open('https://stackoverflow.com/questions/55772171/how-to-update-jupyterlab-using-conda-or-pip', '_blank');
                            INotification.dismiss(id);
                        } })), Object.assign(Object.assign({}, baseToastOptions), { type: 'error' }));
                break;
            case Health.KiteEngineNotInstalled:
                id = await INotification.notify(React.createElement(InnerNotif, { title: "Kite is missing some dependencies" },
                    React.createElement("p", { className: "--jp-kite-innernotif-main-msg" }, "The jupyterlab-kite extension will not work because you are missing the Kite Engine desktop application."),
                    React.createElement("p", null, "To fix this, please install the Kite Engine desktop application."),
                    React.createElement(ButtonBar, { label: "Fix This", onClick: () => {
                            window.open('https://www.kite.com/download?utm_source=jupyterlab-plugin', '_blank');
                            INotification.dismiss(id);
                        } })), Object.assign(Object.assign({}, baseToastOptions), { type: 'error' }));
                break;
            case Health.IncompatibleJLabLSPPlugin:
                id = await INotification.notify(React.createElement(InnerNotif, { title: "Kite may not work properly in your environment" },
                    React.createElement("p", { className: "--jp-kite-innernotif-main-msg" }, "The jupyterlab-kite extension is incompatible with your JupyterLab configuration."),
                    React.createElement("p", null, "It will not work with the jupyterlab-lsp extension."),
                    React.createElement(ButtonBar, { label: "Learn More", onClick: () => {
                            window.open('https://help.kite.com/article/143-how-to-install-the-jupyterlab-plugin#troubleshooting', '_blank');
                            INotification.dismiss(id);
                        } })), Object.assign(Object.assign({}, baseToastOptions), { type: 'warning' }));
                break;
            case Health.JLabKiteHasUpdate:
                id = await INotification.notify(React.createElement(React.Fragment, null,
                    React.createElement(InnerNotif, { title: "There is a new version of Kite available" },
                        React.createElement("p", { className: "--jp-kite-innernotif-main-msg" }, "Please update your jupyterlab-kite extension with the terminal commands:"),
                        React.createElement("ul", { className: "--jp-kite-innernotif-list --jp-kite-innernotif-no-bullets" },
                            React.createElement("li", { className: "--jp-kite-innernotif-li" }, "pip install --upgrade jupyter-kite"),
                            React.createElement("li", { className: "--jp-kite-innernotif-li" }, "jupyter labextension update @kiteco/jupyterlab-kite")),
                        React.createElement(ButtonBar, { label: "Update", onClick: () => {
                                window.open('https://help.kite.com/article/143-how-to-install-the-jupyterlab-plugin#updating-the-plugin');
                                INotification.dismiss(id);
                            } }))), Object.assign(Object.assign({}, baseToastOptions), { type: 'info' }));
                break;
        }
    }
    async getHealth() {
        const installed = await this.fetchKiteInstalled();
        const version = PageConfig.getOption('appVersion');
        if (!installed && Semver.lt(version, _MinJlabVersion)) {
            return Health.RequirementsNotMet;
        }
        else if (!installed) {
            return Health.KiteEngineNotInstalled;
        }
        else if (Semver.lt(version, _MinJlabVersion)) {
            return Health.BelowMinJLabVersion;
        }
        const pluginMap = await this.queryInstalled(false);
        if (pluginMap['@krassowski/jupyterlab-lsp']) {
            return Health.IncompatibleJLabLSPPlugin;
        }
        if (ListModel.entryHasUpdate(pluginMap['@kiteco/jupyterlab-kite'])) {
            return Health.JLabKiteHasUpdate;
        }
        return Health.Healthy;
    }
    async trackIncompatiblity() {
        // Allow using the connection without an actual doucment open
        const emptyVirtualDocument = new VirtualDocument('python', '', {}, {}, false, '.py', false);
        const options = {
            virtual_document: emptyVirtualDocument,
            language: 'python',
            document_path: ''
        };
        const connection = await this.connectionManager.connect(options);
        connection.track('mixpanel', 'jupyterlab_incompatibility', {
            type: 'jupyter-lab-lsp'
        });
    }
    async fetchKiteInstalled() {
        const resp = await ServerConnection.makeRequest(this.kiteInstalledUrl, { method: 'GET' }, ServerConnection.makeSettings());
        return resp.ok && (await resp.json());
    }
    get kiteInstalledUrl() {
        return URLExt.join(PageConfig.getBaseUrl(), ILanguageServerManager.URL_NS, 'kite_installed');
    }
}
KiteAccessible.CreateAsync = async (serviceManager, registery, connectionManager) => {
    // Use extensionmanager settings because KiteAccessible needs
    // protected ListModel.queryInstalled
    const settings = await registery.load('@jupyterlab/extensionmanager-extension:plugin');
    return new KiteAccessible(serviceManager, settings, connectionManager);
};
function InnerNotif(props) {
    return (React.createElement(React.Fragment, null,
        React.createElement("p", { className: "--jp-kite-innernotif-title" }, props.title),
        React.createElement("div", { className: "--jp-kite-innernotif-body" }, props.children)));
}
function ButtonBar(props) {
    return (React.createElement("div", { className: "--jp-kite-buttonbar" },
        React.createElement("div", { className: "--jp-kite-buttonbar-spacer" }),
        React.createElement("button", { className: "--jp-kite-innernotif-button", onClick: props.onClick }, props.label)));
}
//# sourceMappingURL=kite_accessible.js.map