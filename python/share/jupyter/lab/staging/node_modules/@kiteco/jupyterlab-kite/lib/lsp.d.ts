export declare namespace CompletionItemKind {
    const Text = 1;
    const Method = 2;
    const Function = 3;
    const Constructor = 4;
    const Field = 5;
    const Variable = 6;
    const Class = 7;
    const Interface = 8;
    const Module = 9;
    const Property = 10;
    const Unit = 11;
    const Value = 12;
    const Enum = 13;
    const Keyword = 14;
    const Snippet = 15;
    const Color = 16;
    const File = 17;
    const Reference = 18;
    const Folder = 19;
    const EnumMember = 20;
    const Constant = 21;
    const Struct = 22;
    const Event = 23;
    const Operator = 24;
    const TypeParameter = 25;
}
export declare namespace DocumentHighlightKind {
    const Text = 1;
    const Read = 2;
    const Write = 3;
}
export declare function inverse_namespace(namespace: object): Record<number, string>;
/**
 * Why programmatic solution rather than hard-coding the namespace the other way around?
 * Because the namespaces are copy-paste from the LSP specification, and it will be easier
 * to maintain this way in the future.
 *
 * Why not simply import from lsProtocol?
 * Because this triggers some strange webpack issue as an additional package would need to be included.
 * Interestingly, the same thing happens when using CompletionTriggerKind.Invoked from lsProtocol.
 */
export declare const diagnosticSeverityNames: Record<number, string>;
export declare const completionItemKindNames: Record<number, string>;
export declare const documentHighlightKindNames: Record<number, string>;
export declare namespace CompletionTriggerKind {
    const Invoked = 1;
    const TriggerCharacter = 2;
    const TriggerForIncompleteCompletions = 3;
}
export declare type CompletionTriggerKind = 1 | 2 | 3;
