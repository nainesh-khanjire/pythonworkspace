import { Signal } from '@lumino/signaling';
import { PageConfig, URLExt } from '@jupyterlab/coreutils';
import { ServerConnection } from '@jupyterlab/services';
import { ILanguageServerManager } from './tokens';
export class LanguageServerManager {
    constructor(options) {
        this._sessionsChanged = new Signal(this);
        this._sessions = new Map();
        this._settings = options.settings || ServerConnection.makeSettings();
        this._baseUrl = options.baseUrl || PageConfig.getBaseUrl();
        this.fetchSessions().catch(console.warn);
    }
    get statusUrl() {
        return URLExt.join(this._baseUrl, ILanguageServerManager.URL_NS, 'status');
    }
    get sessionsChanged() {
        return this._sessionsChanged;
    }
    get sessions() {
        return this._sessions;
    }
    getServerId(options) {
        // most things speak language
        for (const [key, session] of this._sessions.entries()) {
            if (options.language) {
                if (session.spec.languages &&
                    session.spec.languages.indexOf(options.language) !== -1) {
                    return key;
                }
            }
        }
        return '';
    }
    async fetchSessions() {
        let response = await ServerConnection.makeRequest(this.statusUrl, { method: 'GET' }, this._settings);
        if (!response.ok) {
            throw new Error(response.statusText);
        }
        let sessions;
        try {
            sessions = (await response.json()).sessions;
        }
        catch (err) {
            console.warn(err);
            return;
        }
        for (const key of Object.keys(sessions)) {
            if (this._sessions.has(key)) {
                Object.assign(this._sessions.get(key), sessions[key]);
            }
            else {
                this._sessions.set(key, sessions[key]);
            }
        }
        const oldKeys = this._sessions.keys();
        for (const oldKey in oldKeys) {
            if (!sessions[oldKey]) {
                this._sessions.delete(oldKey);
            }
        }
        this._sessionsChanged.emit(void 0);
    }
}
//# sourceMappingURL=manager.js.map