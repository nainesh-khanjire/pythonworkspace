export function is_equal(self, other) {
    return other && self.line === other.line && self.ch === other.ch;
}
// TODO: needs heavy unit testing
export function position_at_offset(offset, lines) {
    let line = 0;
    let column = 0;
    for (let text_line of lines) {
        // each line has a new line symbol which is accounted for in offset!
        if (text_line.length + 1 <= offset) {
            offset -= text_line.length + 1;
            line += 1;
        }
        else {
            column = offset;
            break;
        }
    }
    return { line, column };
}
export function offset_at_position(position, lines, lines_include_breaks = false) {
    let break_increment = lines_include_breaks ? 0 : 1;
    let offset = 0;
    for (let i = 0; i < lines.length; i++) {
        let text_line = lines[i];
        if (position.line > i) {
            offset += text_line.length + break_increment;
        }
        else {
            offset += position.column;
            break;
        }
    }
    return offset;
}
//# sourceMappingURL=positioning.js.map