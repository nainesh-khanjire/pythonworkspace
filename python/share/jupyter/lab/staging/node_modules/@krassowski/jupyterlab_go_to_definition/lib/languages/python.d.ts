import { LanguageWithOptionalSemicolons, TokenContext } from './analyzer';
export declare class PythonAnalyzer extends LanguageWithOptionalSemicolons {
    definitionRules: ((context: TokenContext) => any)[];
    isStandaloneAssignment(siblings: TokenContext): boolean;
    _is_magic_switch(candidate: TokenContext, key: string, max_args?: number): {
        is_switch: boolean;
        switch: TokenContext;
    };
    _is_magic_export(context: TokenContext, magic: string, export_arg: string, nargs?: number): boolean;
    isStoreMagic(context: TokenContext): boolean;
    isRMagicOutput(context: TokenContext): boolean;
    isImport(context: TokenContext): boolean;
    isCrossFileReference(context: TokenContext): boolean;
    supportsKernel: boolean;
    _breadcrumbs(context: TokenContext, allow_import_dots_upfront?: boolean): string[];
    _imports_breadcrumbs(context: TokenContext): string[];
    definitionLocationQuery(context: TokenContext): string;
    referencePathQuery(context: TokenContext): string;
    guessReferencePath(context: TokenContext): string[];
    isWithStatement(context: TokenContext): boolean;
    isForLoopOrComprehension(context: TokenContext): boolean;
    isTupleUnpacking(context: TokenContext): any;
}
