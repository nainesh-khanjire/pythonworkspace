import * as sinon from 'sinon';
import { ILspConnection } from '..';
interface IListeners {
    [key: string]: Array<(arg: any) => void>;
}
export declare class MockConnection implements ILspConnection {
    listeners: IListeners;
    /**
     * Sends a synthetic event to the client code, for example to imitate a server response
     */
    dispatchEvent: (event: MessageEvent) => boolean;
    sendInitialize: sinon.SinonStub<any[], any>;
    sendChange: sinon.SinonStub<any[], any>;
    sendOpen: sinon.SinonStub<any[], any>;
    getHoverTooltip: sinon.SinonStub<any[], any>;
    getCompletion: sinon.SinonStub<any[], any>;
    getDetailedCompletion: sinon.SinonStub<any[], any>;
    getSignatureHelp: sinon.SinonStub<any[], any>;
    getDocumentHighlights: sinon.SinonStub<any[], any>;
    getDefinition: sinon.SinonStub<any[], any>;
    getTypeDefinition: sinon.SinonStub<any[], any>;
    getImplementation: sinon.SinonStub<any[], any>;
    getReferences: sinon.SinonStub<any[], any>;
    getDocumentUri: sinon.SinonStub<any[], any>;
    isDefinitionSupported: sinon.SinonStub<any[], any>;
    isTypeDefinitionSupported: sinon.SinonStub<any[], any>;
    isImplementationSupported: sinon.SinonStub<any[], any>;
    isReferencesSupported: sinon.SinonStub<any[], any>;
    close: sinon.SinonStub<any[], any>;
    completionCharacters: string[];
    signatureCharacters: string[];
    constructor();
    on(type: string, listener: (...args: any) => void): void;
    off(type: string, listener: (...args: any) => void): void;
    getLanguageCompletionCharacters(): string[];
    getLanguageSignatureCharacters(): string[];
}
export {};
